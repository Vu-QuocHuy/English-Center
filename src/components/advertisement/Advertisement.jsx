import React, { useState, useEffect } from 'react';
import { Box, Typography, IconButton, Button, Dialog, Paper, Slide, Card, CardMedia, CardContent, CardActions
} from '@mui/material';
import { Close as CloseIcon, ArrowForward } from '@mui/icons-material';

const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="down" ref={ref} {...props} />;
});

const Advertisement = ({
  mode = 'slider',
  userRole,
  autoShow = true,
  autoShowDelay = 3000,
  onAdClick
}) => {
  const [open, setOpen] = useState(mode === 'popup' ? false : true);
  const [currentIndex, setCurrentIndex] = useState(0);

  // D·ªØ li·ªáu qu·∫£ng c√°o m·∫´u
  const getAdvertisements = () => {
    const baseAds = [
      {
        id: 1,
        title: 'Kh√≥a h·ªçc IELTS ch·∫•t l∆∞·ª£ng cao',
        description: 'Cam k·∫øt ƒë·∫ßu ra 6.5+ v·ªõi ƒë·ªôi ng≈© gi√°o vi√™n kinh nghi·ªám. ƒêƒÉng k√Ω ngay ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i 20% h·ªçc ph√≠!',
        imageUrl: 'https://images.unsplash.com/photo-1434030216411-0b793f4b4173?w=800&h=400&fit=crop',
        link: '/courses/ielts',
        buttonText: 'ƒêƒÉng k√Ω ngay'
      },
      {
        id: 2,
        title: 'L·ªõp Ti·∫øng Anh Giao Ti·∫øp',
        description: 'Ph√°t tri·ªÉn k·ªπ nƒÉng giao ti·∫øp t·ª± tin v·ªõi ph∆∞∆°ng ph√°p hi·ªán ƒë·∫°i. Khai gi·∫£ng l·ªõp m·ªõi - S·ªë l∆∞·ª£ng c√≥ h·∫°n!',
        imageUrl: 'https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=800&h=400&fit=crop',
        link: '/courses/speaking',
        buttonText: 'T√¨m hi·ªÉu th√™m'
      },
      {
        id: 3,
        title: 'Ch∆∞∆°ng tr√¨nh h·ªçc thi·∫øu nhi',
        description: 'Kh√≥a h·ªçc Ti·∫øng Anh d√†nh cho tr·∫ª em v·ªõi ph∆∞∆°ng ph√°p vui nh·ªôn, hi·ªáu qu·∫£. ∆Øu ƒë√£i ƒë·∫∑c bi·ªát cho h·ªçc sinh m·ªõi!',
        imageUrl: 'https://images.unsplash.com/photo-1503676260728-1c00da094a0b?w=800&h=400&fit=crop',
        link: '/courses/kids',
        buttonText: 'Xem chi ti·∫øt'
      },
      {
        id: 4,
        title: 'Luy·ªán thi TOEIC 990',
        description: 'Ch∆∞∆°ng tr√¨nh luy·ªán thi TOEIC chuy√™n s√¢u v·ªõi t·ª∑ l·ªá ƒë·∫≠u cao. Cam k·∫øt ƒëi·ªÉm s·ªë ho·∫∑c h·ªçc l·∫°i mi·ªÖn ph√≠!',
        imageUrl: 'https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?w=800&h=400&fit=crop',
        link: '/courses/toeic',
        buttonText: 'ƒêƒÉng k√Ω t∆∞ v·∫•n'
      }
    ];

    // T√πy ch·ªânh qu·∫£ng c√°o theo userRole
    if (userRole === 'parent') {
      return baseAds.map(ad => {
        if (ad.id === 3) {
          return {
            ...ad,
            title: 'ƒêƒÉng k√Ω con em h·ªçc Ti·∫øng Anh',
            description: 'Cho con c∆° h·ªôi ph√°t tri·ªÉn v·ªõi ch∆∞∆°ng tr√¨nh Ti·∫øng Anh ch·∫•t l∆∞·ª£ng cao. ∆Øu ƒë√£i ƒë·∫∑c bi·ªát cho ph·ª• huynh m·ªõi!',
          };
        }
        return ad;
      });
    } else if (userRole === 'student') {
      return baseAds.filter(ad => ad.id !== 3); // Kh√¥ng hi·ªÉn th·ªã qu·∫£ng c√°o thi·∫øu nhi cho h·ªçc sinh
    }

    return baseAds;
  };

  const advertisements = getAdvertisements();

  useEffect(() => {
    if (autoShow && mode === 'popup') {
      const timer = setTimeout(() => {
        setOpen(true);
      }, autoShowDelay);
      return () => clearTimeout(timer);
    }
  }, [autoShow, mode, autoShowDelay]);

  useEffect(() => {
    if (mode === 'slider' && advertisements.length > 1) {
      const interval = setInterval(() => {
        setCurrentIndex((prevIndex) =>
          prevIndex === advertisements.length - 1 ? 0 : prevIndex + 1
        );
      }, 5000); // Chuy·ªÉn slide m·ªói 5 gi√¢y

      return () => clearInterval(interval);
    }
  }, [mode, advertisements.length]);

  const handleClose = () => {
    setOpen(false);
  };

  const handleAdClick = (ad) => {
    if (onAdClick) {
      onAdClick(ad);
    }
    // C√≥ th·ªÉ th√™m logic navigation ·ªü ƒë√¢y
    console.log('Clicked ad:', ad);
  };

  if (mode === 'popup') {
    return (
      <Dialog
        open={open}
        onClose={handleClose}
        TransitionComponent={Transition}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: {
            borderRadius: 3,
            overflow: 'hidden'
          }
        }}
      >
        <Box sx={{ position: 'relative' }}>
          <IconButton
            onClick={handleClose}
            sx={{
              position: 'absolute',
              right: 8,
              top: 8,
              zIndex: 1,
              bgcolor: 'rgba(255,255,255,0.9)',
              '&:hover': { bgcolor: 'rgba(255,255,255,1)' }
            }}
          >
            <CloseIcon />
          </IconButton>

          {advertisements[0] && (
            <Card sx={{ boxShadow: 'none' }}>
              <CardMedia
                component="img"
                height="300"
                image={advertisements[0].imageUrl}
                alt={advertisements[0].title}
              />
              <CardContent>
                <Typography variant="h5" component="h2" gutterBottom>
                  {advertisements[0].title}
                </Typography>
                <Typography variant="body1" color="text.secondary">
                  {advertisements[0].description}
                </Typography>
              </CardContent>
              <CardActions sx={{ p: 2, pt: 0 }}>
                <Button
                  variant="contained"
                  size="large"
                  onClick={() => handleAdClick(advertisements[0])}
                  endIcon={<ArrowForward />}
                >
                  {advertisements[0].buttonText}
                </Button>
                <Button
                  variant="text"
                  onClick={handleClose}
                  sx={{ ml: 1 }}
                >
                  ƒê√≥ng
                </Button>
              </CardActions>
            </Card>
          )}
        </Box>
      </Dialog>
    );
  }

  if (mode === 'banner' && advertisements.length > 0) {
    const currentAd = advertisements[currentIndex];
    return (
      <Box sx={{ position: 'relative', mb: 4 }}>
        <Paper
          elevation={2}
          sx={{
            borderRadius: 2,
            overflow: 'hidden',
            background: `linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url(${currentAd.imageUrl})`,
            backgroundSize: 'cover',
            backgroundPosition: 'center',
            minHeight: 200,
            display: 'flex',
            alignItems: 'center',
            color: 'white',
            cursor: 'pointer'
          }}
          onClick={() => handleAdClick(currentAd)}
        >
          <Box sx={{ p: 4, maxWidth: '60%' }}>
            <Typography variant="h4" component="h2" fontWeight="bold" gutterBottom>
              {currentAd.title}
            </Typography>
            <Typography variant="h6" sx={{ mb: 3, opacity: 0.9 }}>
              {currentAd.description}
            </Typography>
            <Button
              variant="contained"
              size="large"
              sx={{
                bgcolor: 'white',
                color: 'primary.main',
                '&:hover': { bgcolor: 'grey.100' }
              }}
              endIcon={<ArrowForward />}
            >
              {currentAd.buttonText}
            </Button>
          </Box>
        </Paper>

        {/* Dots indicator */}
        {advertisements.length > 1 && (
          <Box sx={{
            display: 'flex',
            justifyContent: 'center',
            gap: 1,
            mt: 2
          }}>
            {advertisements.map((_, index) => (
              <Box
                key={index}
                onClick={() => setCurrentIndex(index)}
                sx={{
                  width: 10,
                  height: 10,
                  borderRadius: '50%',
                  bgcolor: index === currentIndex ? 'primary.main' : 'grey.300',
                  cursor: 'pointer',
                  transition: 'all 0.3s'
                }}
              />
            ))}
          </Box>
        )}
      </Box>
    );
  }

  // Mode slider (default)
  return (
    <Box sx={{ mb: 4 }}>
      <Typography variant="h5" fontWeight="bold" gutterBottom sx={{ mb: 3 }}>
        üéØ Kh√≥a h·ªçc n·ªïi b·∫≠t
      </Typography>

      <Box
        sx={{
          display: 'flex',
          gap: 3,
          overflowX: 'auto',
          pb: 2,
          '&::-webkit-scrollbar': {
            height: 8,
          },
          '&::-webkit-scrollbar-track': {
            backgroundColor: 'grey.100',
            borderRadius: 4,
          },
          '&::-webkit-scrollbar-thumb': {
            backgroundColor: 'primary.main',
            borderRadius: 4,
          },
        }}
      >
        {advertisements.map((ad) => (
          <Card
            key={ad.id}
            sx={{
              minWidth: 350,
              cursor: 'pointer',
              transition: 'transform 0.3s, box-shadow 0.3s',
              '&:hover': {
                transform: 'translateY(-4px)',
                boxShadow: 4
              }
            }}
            onClick={() => handleAdClick(ad)}
          >
            <CardMedia
              component="img"
              height="200"
              image={ad.imageUrl}
              alt={ad.title}
            />
            <CardContent>
              <Typography variant="h6" component="h3" gutterBottom>
                {ad.title}
              </Typography>
              <Typography
                variant="body2"
                color="text.secondary"
                sx={{
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  display: '-webkit-box',
                  WebkitLineClamp: 3,
                  WebkitBoxOrient: 'vertical',
                }}
              >
                {ad.description}
              </Typography>
            </CardContent>
            <CardActions>
              <Button
                size="small"
                variant="contained"
                endIcon={<ArrowForward />}
              >
                {ad.buttonText}
              </Button>
            </CardActions>
          </Card>
        ))}
      </Box>
    </Box>
  );
};

export default Advertisement;
